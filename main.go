package main

//go:generate gittyup --name=gittyup

import (
	"bytes"
	"errors"
	"fmt"
	"github.com/alecthomas/kingpin"
	"go/ast"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

var (
	name     = kingpin.Flag("name", "Name of the application.").Short('n').Required().String()
	variable = kingpin.Flag("variable", "Name of the version variable.").Short('v').Default("VERSION").String()
	output   = kingpin.Flag("output", "output file name; default srcdir/<appname>_version.go").Default("").String()
	paths    = kingpin.Arg("paths", "directories or files").Strings()
)

type errWriter struct {
	b   *bytes.Buffer
	err error
}

func (ew *errWriter) writeString(value string) {
	if ew.err != nil {
		return
	}
	_, ew.err = ew.b.WriteString(value)
}

func main() {
	kingpin.Version(VERSION)
	kingpin.Parse()

	inputPaths := *paths
	if len(inputPaths) == 0 {
		// Default: process whole package in current directory.
		inputPaths = []string{"."}
	}
	if err := run(*name, *variable, inputPaths, *output); err != nil {
		fmt.Fprintf(os.Stderr, "Error generating version: %v", err)
	}
}

func run(appname string, variable string, inputPaths []string, output string) error {
	c := exec.Command("git", "describe", "--tags")
	out, err := c.Output()
	if err != nil {
		return errors.New(fmt.Sprintf("Could not run git describe to get current version: %v", err))
	}

	version := strings.TrimSpace(string(out))

	for _, path := range inputPaths {
		var buffer bytes.Buffer

		if err := writeHeader(&buffer, appname, variable, output); err != nil {
			return err
		}

		pkg := parsePackage(path)
		err := generateContent(pkg, version, variable, &buffer)
		if err != nil {
			return err
		}

		// Write to file.
		if output == "" {
			output = fmt.Sprintf("%s/%s_version.go", filepath.Dir(path), appname)
		}
		fmt.Printf("Writing content %s to file %s\n", buffer.Bytes(), output)
		err = ioutil.WriteFile(output, buffer.Bytes(), 0644)
		if err != nil {
			return err
		}
	}

	return nil
}

// isFile reports whether the named file is a file (not a directory).
func isFile(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return !info.IsDir()
}

// writeHeader writes the header of the file (code generation warning as well as the go:generate line)
func writeHeader(buffer *bytes.Buffer, appname string, variable string, output string) error {
	ew := &errWriter{b: buffer}
	ew.writeString(fmt.Sprintln("// GENERATED by gittyup (https://github.com/alexandre-normand/gittyup), DO NOT EDIT"))
	ew.writeString(fmt.Sprintf("//go:generate gittyup --name=%s --variable=%s", appname, variable))
	if output != "" {
		ew.writeString(fmt.Sprintf(" --output=%s", output))
	}
	ew.writeString(" $GOFILE\n")

	return ew.err
}

func generateContent(pkg string, version string, variable string, buffer *bytes.Buffer) error {
	buffer.WriteString(fmt.Sprintf("package %s\n\nconst (\n\t%s = \"%s\"\n)\n", pkg, variable, version))

	return nil
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func parsePackage(directory string) string {
	var astFiles []*ast.File
	fs := token.NewFileSet()
	files, err := ioutil.ReadDir(directory)
	if err != nil {
		log.Fatal(err)
	}

	for _, file := range files {
		if !strings.HasSuffix(file.Name(), ".go") {
			continue
		}
		parsedFile, err := parser.ParseFile(fs, file.Name(), nil, 0)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", file.Name(), err)
		}
		astFiles = append(astFiles, parsedFile)
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}
	return astFiles[0].Name.Name
}
